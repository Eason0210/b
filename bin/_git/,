#!/bin/bash
#
# Depends on https://github.com/burke/matcher
#
# Terse syntax for connecting to machines in Shopify datacenters.
#
# Syntax:
#
#   , [connection type] <space> <hostname> [args]
#
#   connection type can be:
#     * (blank): SSH to the host.
#     * u: scp upload
#     * ur: recursive scp upload
#     * d: scp download
#     * dr: recursive scp download
#
# Examples:
#
#   , bar.com   :: connect to web
#   ,d foo.com /etc/lsb-release :: download the file to the current directory
#   ,u bar.com file :: upload file to your home directory on `bar.com`.
#   ,ur foo.com asdf '/usr/src' :: upload the asdf directory to `/usr/src` on `foo.com`.
#
# Installation
#
#   Save to `~/bin`
#   cd to `~/bin`
#   Run `,`

set -eo pipefail

commands=(_ _d _dr _u _ur)
cmd_func_=ssh-connect
cmd_func_d=scp-download
cmd_func_dr=scp-download-recursive
cmd_func_u=scp-upload
cmd_func_ur=scp-upload-recursive

aget() {
  local array=$1 index=$2
  local i="${array}_$index"
  printf '%s' "${!i}"
}

command_get() {
  aget "cmd_func" $1
}

ssh-connect() {
  machine=$1;shift
  sshrc "${machine}" "$@"
}

scp-download() {
  machine=$1;shift

  remote=$1;shift
  _local="$@"
  if [[ -z "${_local}" ]]; then
    _local="."
  fi

  scp ${scp_opts} "${machine}:${remote}" "${_local}"
}


scp-upload() {
  machine=$1;shift

  if [[ "$#" == "1" ]]; then
    _local=$1
    remote=""
  else
    arr=( "$@" )
    remote="${arr[${#arr[@]}-1]}"
    unset arr[${#arr[@]}-1]
    _local="${arr[@]}"
  fi

  scp ${scp_opts} "${_local}" "${machine}:${remote}"
}

scp-download-recursive() {
  scp_opts="-r"
  scp-download "$@"
}

scp-upload-recursive() {
  scp_opts="-r"
  scp-upload "$@"
}

create_links() {
  local dir=$(dirname $0)
  (
    set +e
    for cmd in ${commands[@]}; do
      ln -s "${dir}/," "${dir}/,${cmd#?}"
    done
  ) 2>/dev/null || true
}

main() {
  create_links

  local path="$(basename $0)"  # e.g.:  ,dr
  local cmd="${path: 1}"       # e.g.:  dr

  cmd_func="$(command_get ${cmd})"
  if [[ -z "${cmd_func}" ]] ; then
    echo "Invalid command ${cmd}" >&2
    exit 1
  fi

  ${cmd_func} "$@"
}
main "$@"
