#!/bin/bash
#
# Depends on https://github.com/burke/matcher
#
# Terse syntax for connecting to machines in Shopify datacenters.
#
# Syntax:
#
#   , [connection type] [dc selector] <space> <hostname search term> [args]
#
#   connection type can be:
#     * (blank): SSH to the host.
#     * u: scp upload
#     * ur: recursive scp upload
#     * d: scp download
#     * dr: recursive scp download
#
#   dc selector can be:
#     * (blank): any DC
#     * c: chicago
#     * a: ashburn
#
#   The DC selector will be combined with the hostname search term and used as
#   input to a fuzzy-find on all hostnames as returned by knife.
#
#   Hostnames are stored in the form `chi/jobs21`, `ash/borg0`, etc., and these
#   are the strings matched against. `,c j21` fuzzy-finds for "chi/j21", which
#   returns `chi/jobs21`, which is translated to `jobs21.chi.shopify.com`
#   before connecting.
#
# Examples:
#
#   , s2p   :: connect to sb2-perf.chi.shopify.com
#   ,c j21  :: connect to jobs21.chi.shopify.com
#   ,a br0  :: connect to borg0.ash.shopify.com
#   ,dc sb1 /etc/lsb-release :: download the file to the current directory
#   ,ua bg0 ./borg-run :: upload borg-run to your home directory on `borg0.ash`.
#   ,urc bg2 borg-baseimage '/usr/src' :: upload the borg-baseimage directory to `/usr/src` on `borg2.chi`.
#
# Installation
#
#   Save to `~/bin`
#   cd to `~/bin`
#   Run `,; ,g`

set -eo pipefail

commands=(_ _g _d _dr _u _ur _k)
cmd_func_=ssh-connect
cmd_func_g=generate-dc-manifest
cmd_func_d=scp-download
cmd_func_dr=scp-download-recursive
cmd_func_u=scp-upload
cmd_func_ur=scp-upload-recursive
cmd_func_k=knife-edit

locations=(_ _c _a)
loc_path_=
loc_path_c=chi/
loc_path_a=ash/

aget() {
  local array=$1 index=$2
  local i="${array}_$index"
  printf '%s' "${!i}"
}

command_get() {
  aget "cmd_func" $1
}

location_get() {
  aget "loc_path" $1
}

generate-dc-manifest() {
  /usr/bin/ruby -ne 'puts $_.chomp.sub(/\.shopify\.com$/,"").split(?.).reverse*?/' \
    <(knife node list) \
    > ~/.machines
}

set_machine() {
  machine=$(resolve_machine "$1")
  echo "machine: ${machine}"
}

ssh-connect() {
  set_machine $1;shift
  ssh "${machine}" "$@"
}

scp-download() {
  set_machine $1;shift

  remote=$1;shift
  _local="$@"
  if [[ -z "${_local}" ]]; then
    _local="."
  fi
  echo "remote:  ${remote}"
  echo "local:   ${_local}"

  scp ${scp_opts} "${machine}:${remote}" "${_local}"
}


scp-upload() {
  set_machine $1;shift

  if [[ "$#" == "1" ]]; then
    _local=$1
    remote=""
  else
    arr=( "$@" )
    remote="${arr[${#arr[@]}-1]}"
    unset arr[${#arr[@]}-1]
    _local="${arr[@]}"
  fi
  echo "local:   ${_local}"
  echo "remote:  ${remote}"

  scp ${scp_opts} "${_local}" "${machine}:${remote}"
}

scp-download-recursive() {
  scp_opts="-r"
  scp_dn "$@"
}

scp-upload-recursive() {
  scp_opts="-r"
  scp_up "$@"
}

knife-edit() {
  set_machine $1;shift
  knife node edit "${machine}"
}

create_links() {
  local dir=$(dirname $0)
  (
    set +e
    for cmd in ${commands[@]}; do
      for loc in ${locations[@]}; do
        ln -s "${dir}/," "${dir}/,${cmd#?}${loc#?}"
      done
    done
  ) 2>/dev/null || true
}

main() {
  create_links

  local path="$(basename $0)"  # e.g.:  ,drc
  local cmd="${path: 1}"       # e.g.:  drc
  local last_char="${cmd: -1}" # e.g.:  c

  search_base="$(location_get ${last_char})"
  if [[ -n "${search_base}" ]]; then
    local cmd="${cmd%?}"       # e.g.: dr
  fi

  cmd_func="$(command_get ${cmd})"
  echo "command: ${cmd_func}"
  if [[ -z "${cmd_func}" ]] ; then
    echo "Invalid command ${cmd}"
    exit 1
  fi

  ${cmd_func} "${search_base}$@"
}
main "$@"
